# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main
# Stages
# Stage-1:
 # Task-1: Copy terraform-manifests files to Build Artifact Directory
 # Task-2: Publish build articats to Azure Pipelines
# Pipeline Hierarchial Flow: Stages -> Stage -> Jobs -> Job -> Steps -> Task1, Task2, Task3
stages:
# Build Stage 
  - stage: Build
    displayName: Build Stage
    jobs:
    - job: Build
      displayName: Build Job
      pool:
        vmImage: 'ubuntu-latest'
      steps: 
      ## Publish Artifacts pipeline code in addition to Build and Push 
        - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory) 
        - bash: echo Before copying Contents in Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory) 
 # Task-2: Copy files (Copy files from a source folder to target folder)
 # Source Directory: $(System.DefaultWorkingDirectory)/terraform-manifests
 # Target Directory: $(Build.ArtifactStagingDirectory)
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
            OverWrite: true
          # List files from Build Artifact Staging Directory - After Copy
        - bash: echo After copying to Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory) 
        # Task-3: Publish build artifacts (Publish build to Azure Pipelines) 
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'terraform-manifests'
            publishLocation: 'Container'


# trigger:
# - main

# pool:
#   vmImage: ubuntu-latest

# stages:
# - stage: Terraform_Build
#   displayName: 'Build Resource Group with Terraform'
#   jobs: 
#   - job: Build
#     displayName: Build Resource Group
#     timeoutInMinutes: 30 # job times out in 30 minutes
#     steps: 
#       - task: TerraformInstaller@1
#         displayName: terrafrom Install
#         inputs:
#           terraformVersion: 'latest'
#       - task: TerraformTaskV2@2
#         displayName: terraform init
#         inputs:
#           provider: 'azurerm'
#           command: 'init'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#           backendServiceArm: 'aks provisioning-Infra'
#           backendAzureRmResourceGroupName: 'journey-rg'
#           backendAzureRmStorageAccountName: 'journeytfstate'
#           backendAzureRmContainerName: 'terraform'
#           backendAzureRmKey: 'tf/terraform.tfstate'

#       - task: TerraformTaskV4@4
#         displayName: Run terraform Validate
#         inputs:
#           provider: 'azurerm'
#           command: 'validate'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

#       - task: TerraformTaskV4@4
#         displayName: run terraform Plan
#         inputs:
#           provider: 'azurerm'
#           command: 'plan'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#           environmentServiceNameAzureRM: 'aks provisioning-Infra'