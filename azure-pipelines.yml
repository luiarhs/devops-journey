# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: Terraform_Build
  displayName: 'Build Resource Group with Terraform'
  jobs: 
  - job: Build
    displayName: Build Resource Group
    timeoutInMinutes: 30 # job times out in 30 minutes
    steps: 
      - task: TerraformInstaller@1
        displayName: terrafrom Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV2@2
        displayName: terraform init
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          backendServiceArm: 'aks provisioning-Infra'
          backendAzureRmResourceGroupName: 'journey-rg'
          backendAzureRmStorageAccountName: 'journeytfstate'
          backendAzureRmContainerName: 'terraform'
          backendAzureRmKey: 'tf/terraform.tfstate'

      - task: TerraformTaskV4@4
        displayName: Run terraform Validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

      - task: TerraformTaskV4@4
        displayName: run terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'aks provisioning-Infra'